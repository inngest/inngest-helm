name: Helm Chart Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
    paths:
      - "Chart.yaml"
      - "values.yaml"
      - "templates/**"
      - ".github/workflows/helm-lint.yml"

jobs:
  helm-lint:
    name: Helm Lint and Validate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Helm Lint
        run: |
          echo "Running Helm lint..."
          helm lint .

      - name: Helm Template Validation
        run: |
          echo "Validating Helm templates..."
          helm template inngest-test . --debug --dry-run > /dev/null

      - name: Helm Template with Custom Values
        run: |
          echo "Testing with custom values..."
          # Test with KEDA enabled
          helm template inngest-test . \
            --set keda.enabled=true \
            --set inngest.eventKey=1234 \
            --set inngest.signingKey=1234 \
            --debug --dry-run > /dev/null

      - name: Validate Required Values
        run: |
          echo "Checking for required values..."
          # This should fail without required keys
          if helm template inngest-test . --debug --dry-run 2>&1 | grep -q "required"; then
            echo "✓ Required values validation working correctly"
          else
            echo "⚠️  Required values validation may not be configured"
          fi

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Install kubesec
        run: |
          curl -sSL https://github.com/controlplaneio/kubesec/releases/latest/download/kubesec_linux_amd64.tar.gz | tar xz
          sudo mv kubesec /usr/local/bin/

      - name: Security Scan with kubesec
        run: |
          echo "Running security scan on templates..."
          helm template inngest-test . \
            --set inngest.eventKey=1234 \
            --set inngest.signingKey=1234 \
            > rendered-templates.yaml

          # Run kubesec scan
          kubesec scan rendered-templates.yaml

      - name: Check Security Contexts
        run: |
          echo "Validating security contexts..."
          helm template inngest-test . \
            --set inngest.eventKey=1234 \
            --set inngest.signingKey=1234 | \
          grep -E "(runAsNonRoot|readOnlyRootFilesystem|allowPrivilegeEscalation)" || \
          (echo "⚠️  Security contexts may not be properly configured" && exit 0)

  chart-testing:
    name: Chart Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: Run chart-testing (lint)
        run: ct lint --target-branch ${{ github.event.repository.default_branch }}

      - name: Create kind cluster
        uses: helm/kind-action@v1.10.0

      - name: Run chart-testing (install)
        run: |
          # Create test values that include required keys
          cat > test-values.yaml << EOF
          inngest:
            eventKey: "1234"
            signingKey: "1234"
          EOF

          ct install --target-branch ${{ github.event.repository.default_branch }} --helm-extra-set-args "--values=test-values.yaml"

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Chart.yaml
        run: |
          echo "Validating Chart.yaml..."
          if [ ! -f Chart.yaml ]; then
            echo "❌ Chart.yaml not found"
            exit 1
          fi

          # Check required fields
          for field in name version description; do
            if ! grep -q "^${field}:" Chart.yaml; then
              echo "❌ Missing required field: ${field}"
              exit 1
            fi
          done
          echo "✓ Chart.yaml validation passed"

      - name: Check README
        run: |
          echo "Checking README documentation..."
          if [ ! -f README.md ]; then
            echo "⚠️  README.md not found - consider adding chart documentation"
          else
            echo "✓ README.md found"
          fi

      - name: Validate Values Schema
        run: |
          echo "Checking for values schema..."
          if [ -f values.schema.json ]; then
            echo "✓ Values schema found"
          else
            echo "⚠️  Consider adding values.schema.json for better validation"
          fi
